// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module atsc_rsdecoder_impl_modnn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_FF = 32'b11111111;
parameter    ap_const_lv32_FFFFFF01 = 32'b11111111111111111111111100000001;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_20;
wire   [31:0] x_assign_1_cast_fu_69_p1;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_39;
wire   [0:0] tmp_fu_29_p2;
reg   [31:0] p_0_reg_20;
wire   [31:0] x_assign_fu_35_p2;
wire   [23:0] tmp_1_fu_45_p4;
wire   [7:0] tmp_2_fu_41_p1;
wire   [24:0] tmp_4_cast_fu_55_p1;
wire   [24:0] tmp_5_cast_fu_59_p1;
wire   [24:0] x_assign_1_fu_63_p2;
reg   [31:0] ap_return_preg = 32'b00000000000000000000000000000000;
reg   [1:0] ap_NS_fsm;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_return_preg
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv32_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_29_p2 == ap_const_lv1_0))) begin
            ap_return_preg <= p_0_reg_20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_29_p2 == ap_const_lv1_0))) begin
        p_0_reg_20 <= x_assign_1_cast_fu_69_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        p_0_reg_20 <= x;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or tmp_fu_29_p2) begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_29_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_fu_29_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_29_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_fu_29_p2 or p_0_reg_20 or ap_return_preg) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_29_p2 == ap_const_lv1_0))) begin
        ap_return = p_0_reg_20;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (ap_sig_bdd_20) begin
    if (ap_sig_bdd_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_39) begin
    if (ap_sig_bdd_39) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_fu_29_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(tmp_fu_29_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



always @ (ap_CS_fsm) begin
    ap_sig_bdd_20 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_39 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign tmp_1_fu_45_p4 = {{x_assign_fu_35_p2[ap_const_lv32_1F : ap_const_lv32_8]}};

assign tmp_2_fu_41_p1 = x_assign_fu_35_p2[7:0];

assign tmp_4_cast_fu_55_p1 = tmp_1_fu_45_p4;

assign tmp_5_cast_fu_59_p1 = tmp_2_fu_41_p1;

assign tmp_fu_29_p2 = (p_0_reg_20 < ap_const_lv32_FF? 1'b1: 1'b0);

assign x_assign_1_cast_fu_69_p1 = x_assign_1_fu_63_p2;

assign x_assign_1_fu_63_p2 = (tmp_4_cast_fu_55_p1 + tmp_5_cast_fu_59_p1);

assign x_assign_fu_35_p2 = ($signed(ap_const_lv32_FFFFFF01) + $signed(p_0_reg_20));


endmodule //atsc_rsdecoder_impl_modnn

